use serde::Deserialize;
use std::env;

#[derive(Deserialize, Clone)]
pub struct Settings {
    pub database_url: String,
    pub stripe_api_key: String,
    pub bind_addr: String,
    pub service_name: String,
}

impl Settings {
    pub fn from_env() -> Self {
        dotenv::dotenv().ok();
        envy::from_env().expect("Failed to load config")
    }
}

use serde::{Deserialize, Serialize};
use uuid::Uuid;

#[derive(Debug, Deserialize)]
pub struct CreatePayment {
    pub user_id: Uuid,
    pub amount_cents: i64,
    pub currency: String,
    pub payout_recipient: String,
}

#[derive(Debug, Serialize)]
pub struct PaymentResponse {
    pub id: Uuid,
    pub status: String,
}

use actix_web::{web, HttpResponse};
use sqlx::PgPool;
use uuid::Uuid;
use stripe::{Client as StripeClient, CreatePayout, PayoutSettings};
use crate::{models::*, config::Settings};

pub async fn create_payment(
    pool: web::Data<PgPool>,
    stripe: web::Data<StripeClient>,
    settings: web::Data<Settings>,
    payload: web::Json<CreatePayment>,
) -> HttpResponse {
    let id = Uuid::new_v4();
    // Persist to DB
    let rec = sqlx::query!(
        r#"INSERT INTO payments (id, user_id, amount_cents, currency, payout_recipient)
           VALUES ($1,$2,$3,$4,$5) RETURNING status"#,
        id,
        payload.user_id,
        payload.amount_cents,
        payload.currency,
        payload.payout_recipient,
    )
    .fetch_one(pool.get_ref())
    .await
    .expect("DB insert failed");

    // Call Stripe
    let payout = CreatePayout::new(rec.status.clone(), payload.amount_cents as i64)
        .set_destination(payload.payout_recipient.clone());
    let stripe_res = stripe.create_payout(payout).await;
    let status = match stripe_res {
        Ok(p) => p.status,
        Err(_) => "failed".into(),
    };

    HttpResponse::Ok().json(PaymentResponse { id, status })
}

pub async fn get_payment(
    pool: web::Data<PgPool>,
    path: web::Path<Uuid>,
) -> HttpResponse {
    let id = path.into_inner();
    let rec = sqlx::query_as!(
        PaymentResponse,
        "SELECT id, status FROM payments WHERE id=$1", id
    )
    .fetch_one(pool.get_ref())
    .await;

    match rec {
        Ok(p) => HttpResponse::Ok().json(p),
        Err(_) => HttpResponse::NotFound().finish(),
    }
}

mod config;
mod models;
mod handlers;

use actix_web::{web, App, HttpServer};
use sqlx::PgPool;
use stripe::Client as StripeClient;
use tracing_subscriber;

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    let settings = config::Settings::from_env();
    tracing_subscriber::fmt::init();

    // DB pool
    let pool = PgPool::connect(&settings.database_url)
        .await
        .expect("DB pool failed");

    // Stripe client
    let stripe = StripeClient::new(settings.stripe_api_key.clone());

    // Metrics registry
    let registry = prometheus::Registry::new();
    let encoder = prometheus::TextEncoder::new();

    HttpServer::new(move || {
        App::new()
            .app_data(web::Data::new(settings.clone()))
            .app_data(web::Data::new(pool.clone()))
            .app_data(web::Data::new(stripe.clone()))
            .route("/payments", web::post().to(handlers::create_payment))
            .route("/payments/{id}", web::get().to(handlers::get_payment))
            .route("/metrics", web::get().to(move || async move {
                let metric_families = registry.gather();
                let mut buf = vec![];
                encoder.encode(&metric_families, &mut buf).unwrap();
                HttpResponse::Ok()
                    .content_type("text/plain; version=0.0.4")
                    .body(buf)
            }))
    })
    .bind(settings.bind_addr)?
    .run()
    .await
}
